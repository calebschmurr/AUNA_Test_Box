#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.1 on Tue Feb  9 17:34:52 2021
#

import wx

###########################################################################
######Include this as well in the MainWindowUI#############################
import PinList
import SerialMonitor
import TestSequence
import PinControlUI

import time

import logging

from pathlib import Path

from PIL import Image

#Change current directory to location of python file.
#Need to do this to load in tests properly.
import os
os.chdir(os.path.dirname(os.path.abspath(__file__)))


logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

###########################################################################
##################Finish Importing Logging#################################


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MainWindow(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainWindow.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1200, 800))
        self.SetTitle("Aurora NA Test Software")

        self.Notebook = wx.Notebook(self, wx.ID_ANY)

        self.Load_Existing_Test_Tab = wx.Panel(self.Notebook, wx.ID_ANY)
        self.Notebook.AddPage(self.Load_Existing_Test_Tab, "Load Test")

        self.Tab_Sizer = wx.BoxSizer(wx.VERTICAL)

        self.List_Of_Tests_Label = wx.StaticText(self.Load_Existing_Test_Tab, wx.ID_ANY, "List of Tests found at PATH")
        self.Tab_Sizer.Add(self.List_Of_Tests_Label, 0, 0, 0)

        self.List_Of_Tests = wx.ListBox(self.Load_Existing_Test_Tab, wx.ID_ANY, choices=["choice 1"])
        self.List_Of_Tests.SetMinSize((500, 200))
        self.Tab_Sizer.Add(self.List_Of_Tests, 0, 0, 0)

        self.Test_Options_Sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.Tab_Sizer.Add(self.Test_Options_Sizer, 1, wx.EXPAND, 0)

        self.Load_Test = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "Load Test")
        self.Test_Options_Sizer.Add(self.Load_Test, 0, 0, 0)

        self.Modify_Test_Button = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "Modify Test")
        self.Test_Options_Sizer.Add(self.Modify_Test_Button, 0, 0, 0)

        self.Delete_Test_Button = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "Delete Test")
        self.Test_Options_Sizer.Add(self.Delete_Test_Button, 0, 0, 0)

        self.Start_New_Test_Button = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "New Test")
        self.Test_Options_Sizer.Add(self.Start_New_Test_Button, 0, 0, 0)

        self.Com_Sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.Tab_Sizer.Add(self.Com_Sizer, 1, wx.EXPAND, 0)

        self.COM_Port_Label = wx.StaticText(self.Load_Existing_Test_Tab, wx.ID_ANY, "Serial Port:")
        self.Com_Sizer.Add(self.COM_Port_Label, 0, wx.ALL, 3)

        self.Port_Connect = wx.ComboBox(self.Load_Existing_Test_Tab, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.Com_Sizer.Add(self.Port_Connect, 0, wx.ALL, 1)

        self.Connect_Button = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "Connect")
        self.Com_Sizer.Add(self.Connect_Button, 0, wx.ALL, 1)

        self.Disconnect_Button = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "Disconnect")
        self.Com_Sizer.Add(self.Disconnect_Button, 0, wx.ALL, 1)

        self.Refresh_Serial_Button = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "Refresh")
        self.Com_Sizer.Add(self.Refresh_Serial_Button, 0, wx.ALL, 1)

        self.Serial_Enabled_Checkbox = wx.CheckBox(self.Load_Existing_Test_Tab, wx.ID_ANY, "Ignore Serial")
        self.Com_Sizer.Add(self.Serial_Enabled_Checkbox, 0, wx.ALL, 3)

        self.ShowPinUI_Button = wx.Button(self.Load_Existing_Test_Tab, wx.ID_ANY, "Show Pin UI")
        self.Tab_Sizer.Add(self.ShowPinUI_Button, 0, 0, 0)

        self.Test_Tab = wx.Panel(self.Notebook, wx.ID_ANY)
        self.Notebook.AddPage(self.Test_Tab, "Test")

        self.Test_Tab_Sizer = wx.BoxSizer(wx.VERTICAL)

        self.Current_Test_Label = wx.StaticText(self.Test_Tab, wx.ID_ANY, "Current Test:")
        self.Test_Tab_Sizer.Add(self.Current_Test_Label, 0, 0, 0)

        self.Next_Step_Image = wx.StaticBitmap(self.Test_Tab, wx.ID_ANY, wx.Bitmap(1000, 500))
        self.Next_Step_Image.SetMinSize((1000, 500))
        self.Test_Tab_Sizer.Add(self.Next_Step_Image, 0, 0, 0)

        self.Test_Status_Sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.Test_Tab_Sizer.Add(self.Test_Status_Sizer, 1, wx.EXPAND, 0)

        self.Test_Status_Label = wx.StaticText(self.Test_Tab, wx.ID_ANY, "Status:")
        self.Test_Status_Label.SetMinSize((200, 16))
        self.Test_Status_Sizer.Add(self.Test_Status_Label, 0, 0, 0)

        self.Stage_Description_Label = wx.StaticText(self.Test_Tab, wx.ID_ANY, "Operation:")
        self.Stage_Description_Label.SetMinSize((200, 16))
        self.Test_Status_Sizer.Add(self.Stage_Description_Label, 0, 0, 0)

        self.Next_Step_Button = wx.Button(self.Test_Tab, wx.ID_ANY, "Next Step")
        self.Test_Status_Sizer.Add(self.Next_Step_Button, 0, 0, 0)

        self.Close_Current_Test_Button = wx.Button(self.Test_Tab, wx.ID_ANY, "Close Test")
        self.Test_Status_Sizer.Add(self.Close_Current_Test_Button, 0, 0, 0)

        self.New_Test_Initiator_Tab = wx.Panel(self.Notebook, wx.ID_ANY)
        self.Notebook.AddPage(self.New_Test_Initiator_Tab, "New Test")

        self.Creator_Sizer = wx.BoxSizer(wx.VERTICAL)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        self.Creator_Sizer.Add(sizer_1, 1, wx.EXPAND, 0)

        self.Test_Name_Label = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, "Test Name:", style=wx.ALIGN_RIGHT)
        self.Test_Name_Label.SetMinSize((200, 16))
        sizer_1.Add(self.Test_Name_Label, 0, wx.ALL, 5)

        self.TestNameTextbox = wx.TextCtrl(self.New_Test_Initiator_Tab, wx.ID_ANY, "")
        self.TestNameTextbox.SetMinSize((200, 23))
        sizer_1.Add(self.TestNameTextbox, 0, 0, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        self.Creator_Sizer.Add(sizer_2, 1, wx.EXPAND, 0)

        self.New_Test_Description_Label = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, "Description:", style=wx.ALIGN_RIGHT)
        self.New_Test_Description_Label.SetMinSize((200, 16))
        sizer_2.Add(self.New_Test_Description_Label, 0, wx.ALL, 3)

        self.Test_Description = wx.TextCtrl(self.New_Test_Initiator_Tab, wx.ID_ANY, "")
        self.Test_Description.SetMinSize((350, 23))
        sizer_2.Add(self.Test_Description, 0, 0, 0)

        self.label_3 = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, "Pins Used:", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.Creator_Sizer.Add(self.label_3, 0, wx.ALL, 4)

        self.Pins_Used_Sizer = wx.GridSizer(7, 4, 0, 0)
        self.Creator_Sizer.Add(self.Pins_Used_Sizer, 2, wx.EXPAND, 0)

        for x in range(1,13):
            exec("self.PinX1_{}_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.Pins_Used_Sizer.Add(self.PinX1_{}_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX1_{}Label = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, 'X1_{} (Analog {})')".format(x, x, x-1))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Label, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}Select = wx.ComboBox(self.New_Test_Initiator_Tab, wx.ID_ANY, choices=['Input', 'Unused'], style=wx.CB_DROPDOWN)".format(x))
            exec("self.PinX1_{}Select.SetSelection(1)".format(x))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Select, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}Description = wx.TextCtrl(self.New_Test_Initiator_Tab, wx.ID_ANY, 'Description')".format(x))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Description, 0, 0, 0)".format(x,x))

        for x in range(13, 15):
            exec("self.PinX1_{}_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.Pins_Used_Sizer.Add(self.PinX1_{}_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX1_{}Label = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, 'X1_{} (Var. Volt {})')".format(x, x, x-12))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Label, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}Select = wx.ComboBox(self.New_Test_Initiator_Tab, wx.ID_ANY, choices=['Output', 'Unused'], style=wx.CB_DROPDOWN)".format(x))
            exec("self.PinX1_{}Select.SetSelection(1)".format(x))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Select, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}Description = wx.TextCtrl(self.New_Test_Initiator_Tab, wx.ID_ANY, 'Description')".format(x))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Description, 0, 0, 0)".format(x,x))

        for x in range(15, 19):
            exec("self.PinX1_{}_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.Pins_Used_Sizer.Add(self.PinX1_{}_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX1_{}Label = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, 'X1_{} (PWM Out {})')".format(x, x, x-14))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Label, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}Select = wx.ComboBox(self.New_Test_Initiator_Tab, wx.ID_ANY, choices=['Output', 'Unused'], style=wx.CB_DROPDOWN)".format(x))
            exec("self.PinX1_{}Select.SetSelection(1)".format(x))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Select, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}Description = wx.TextCtrl(self.New_Test_Initiator_Tab, wx.ID_ANY, 'Description')".format(x))
            exec("self.PinX1_{}_Sizer.Add(self.PinX1_{}Description, 0, 0, 0)".format(x,x))

        for x in range(1, 5):
            exec("self.PinX2_{}_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.Pins_Used_Sizer.Add(self.PinX2_{}_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX2_{}Label = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, 'X2_{} (K{} - 12V)')".format(x, x, x))
            exec("self.PinX2_{}_Sizer.Add(self.PinX2_{}Label, 0, 0, 0)".format(x,x))
            exec("self.PinX2_{}Select = wx.ComboBox(self.New_Test_Initiator_Tab, wx.ID_ANY, choices=['Output', 'Unused'], style=wx.CB_DROPDOWN)".format(x))
            exec("self.PinX2_{}Select.SetSelection(1)".format(x))
            exec("self.PinX2_{}_Sizer.Add(self.PinX2_{}Select, 0, 0, 0)".format(x,x))
            exec("self.PinX2_{}Description = wx.TextCtrl(self.New_Test_Initiator_Tab, wx.ID_ANY, 'Description')".format(x))
            exec("self.PinX2_{}_Sizer.Add(self.PinX2_{}Description, 0, 0, 0)".format(x,x))

        for x in range(5, 9):
            exec("self.PinX2_{}_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.Pins_Used_Sizer.Add(self.PinX2_{}_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX2_{}Label = wx.StaticText(self.New_Test_Initiator_Tab, wx.ID_ANY, 'X2_{} (K{} - 24V)')".format(x, x, x))
            exec("self.PinX2_{}_Sizer.Add(self.PinX2_{}Label, 0, 0, 0)".format(x,x))
            exec("self.PinX2_{}Select = wx.ComboBox(self.New_Test_Initiator_Tab, wx.ID_ANY, choices=['Output', 'Unused'], style=wx.CB_DROPDOWN)".format(x))
            exec("self.PinX2_{}Select.SetSelection(1)".format(x))
            exec("self.PinX2_{}_Sizer.Add(self.PinX2_{}Select, 0, 0, 0)".format(x,x))
            exec("self.PinX2_{}Description = wx.TextCtrl(self.New_Test_Initiator_Tab, wx.ID_ANY, 'Description')".format(x))
            exec("self.PinX2_{}_Sizer.Add(self.PinX2_{}Description, 0, 0, 0)".format(x,x))


        self.Pins_Used_Sizer.Add((0, 0), 0, 0, 0)

        self.Pins_Used_Sizer.Add((0, 0), 0, 0, 0)

        self.newTestButtonsSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.Creator_Sizer.Add(self.newTestButtonsSizer, 1, wx.EXPAND, 0)

        self.createNewTestButton = wx.Button(self.New_Test_Initiator_Tab, wx.ID_ANY, "Create New Test")
        self.createNewTestButton.SetMinSize((100, 40))
        self.newTestButtonsSizer.Add(self.createNewTestButton, 0, wx.ALL, 8)

        self.clearNewTestValuesButton = wx.Button(self.New_Test_Initiator_Tab, wx.ID_ANY, "Clear All Values")
        self.clearNewTestValuesButton.SetMinSize((100, 40))
        self.newTestButtonsSizer.Add(self.clearNewTestValuesButton, 0, wx.ALL, 8)

        self.New_Test_Creator = wx.Panel(self.Notebook, wx.ID_ANY)
        self.Notebook.AddPage(self.New_Test_Creator, "New Test Creator")

        self.NewTestCreatorSizer = wx.BoxSizer(wx.VERTICAL)

        self.TestInfoSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.NewTestCreatorSizer.Add(self.TestInfoSizer, 0, 0, 0)

        self.NewTestCreatorTestName = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, "Test Name:")
        self.NewTestCreatorTestName.SetMinSize((200, 16))
        self.TestInfoSizer.Add(self.NewTestCreatorTestName, 0, wx.ALL, 4)

        self.NewTestCreatorStageNumber = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, "Stage: 0/0")
        self.NewTestCreatorStageNumber.SetMinSize((200, 16))
        self.TestInfoSizer.Add(self.NewTestCreatorStageNumber, 0, wx.ALL, 4)

        self.NewTestCreatorDescriptionLabel = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, "Description:")
        self.TestInfoSizer.Add(self.NewTestCreatorDescriptionLabel, 0, 0, 0)

        self.NewTestCreatorDescription = wx.TextCtrl(self.New_Test_Creator, wx.ID_ANY, "")
        self.NewTestCreatorDescription.SetMinSize((220, 23))
        self.TestInfoSizer.Add(self.NewTestCreatorDescription, 0, 0, 0)

        self.NewTestCreatorPreviousStage = wx.Button(self.New_Test_Creator, wx.ID_ANY, "Previous Stage")
        self.NewTestCreatorPreviousStage.SetMinSize((110, 23))
        self.TestInfoSizer.Add(self.NewTestCreatorPreviousStage, 1, wx.ALL, 4)

        self.NewTestCreatorNextStage = wx.Button(self.New_Test_Creator, wx.ID_ANY, "Next Stage")
        self.NewTestCreatorNextStage.SetMinSize((110, 23))
        self.TestInfoSizer.Add(self.NewTestCreatorNextStage, 1, wx.ALL, 4)

        self.Delete_Stage_Button = wx.Button(self.New_Test_Creator, wx.ID_ANY, "Delete Stage")
        self.TestInfoSizer.Add(self.Delete_Stage_Button, 1, wx.ALL, 4)

        self.NewTestCreatorFinishTestButton = wx.Button(self.New_Test_Creator, wx.ID_ANY, "Finish Test")
        self.TestInfoSizer.Add(self.NewTestCreatorFinishTestButton, 1, wx.ALL, 4)

        self.TestCreatorCurrentImg = wx.StaticBitmap(self.New_Test_Creator, wx.ID_ANY, wx.NullBitmap)
        self.NewTestCreatorSizer.Add(self.TestCreatorCurrentImg, 1, 0, 0)

        self.NewTestImageInfoSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.NewTestCreatorSizer.Add(self.NewTestImageInfoSizer, 0, wx.EXPAND, 0)

        self.NewTestCreatorImageLabel = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, "Image:")
        self.NewTestImageInfoSizer.Add(self.NewTestCreatorImageLabel, 0, wx.ALL, 5)

        self.NewTestCreatorSelectImage = wx.Button(self.New_Test_Creator, wx.ID_ANY, "Select Image")
        self.NewTestCreatorSelectImage.SetMinSize((120, 30))
        self.NewTestImageInfoSizer.Add(self.NewTestCreatorSelectImage, 0, wx.ALL, 5)

        self.NewTestCreatorErrorMessageLabel = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, "Error:")
        self.NewTestImageInfoSizer.Add(self.NewTestCreatorErrorMessageLabel, 0, wx.ALL, 5)

        self.NewTestCreatorErrorMessage = wx.TextCtrl(self.New_Test_Creator, wx.ID_ANY, "")
        self.NewTestCreatorErrorMessage.SetMinSize((600, 23))
        self.NewTestImageInfoSizer.Add(self.NewTestCreatorErrorMessage, 0, 0, 0)

        self.NewTestCurrentImgPath = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, "Current Img Path : ")
        self.NewTestCreatorSizer.Add(self.NewTestCurrentImgPath, 0, 0, 0)

        self.TestPinsSizer = wx.GridSizer(7, 4, 0, 0)
        self.NewTestCreatorSizer.Add(self.TestPinsSizer, 1, wx.EXPAND, 0)

#############################################################################################################################
################################To be copied over for adding in pins to test creator segment###################################

        for x in range(1,13):
            exec("self.PinX1_{}_Stage_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.TestPinsSizer.Add(self.PinX1_{}_Stage_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX1_{}_Stage_Label = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, 'X1_{}')".format(x,x))
            exec("self.PinX1_{}_Stage_Sizer.Add(self.PinX1_{}_Stage_Label, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}_Stage_Mode_Select = wx.ComboBox(self.New_Test_Creator, wx.ID_ANY, choices=['<', '>', '='], style=wx.CB_DROPDOWN)".format(x))
            exec("self.PinX1_{}_Stage_Mode_Select.SetSelection(-1)".format(x))
            exec("self.PinX1_{}_Stage_Mode_Select.Enable(False)".format(x))
            exec("self.PinX1_{}_Stage_Sizer.Add(self.PinX1_{}_Stage_Mode_Select, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}_Stage_Value = wx.TextCtrl(self.New_Test_Creator, wx.ID_ANY, '0')".format(x))
            exec("self.PinX1_{}_Stage_Value.Enable(False)".format(x))
            exec("self.PinX1_{}_Stage_Sizer.Add(self.PinX1_{}_Stage_Value, 0, 0, 0)".format(x,x))

        for x in range(13, 18):
            exec("self.PinX1_{}_Stage_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.TestPinsSizer.Add(self.PinX1_{}_Stage_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX1_{}_Stage_Label = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, 'X1_{}')".format(x,x))
            exec("self.PinX1_{}_Stage_Sizer.Add(self.PinX1_{}_Stage_Label, 0, 0, 0)".format(x,x))
            exec("self.PinX1_{}_Stage_Value = wx.TextCtrl(self.New_Test_Creator, wx.ID_ANY, '0')".format(x))
            exec("self.PinX1_{}_Stage_Value.Enable(False)".format(x))
            exec("self.PinX1_{}_Stage_Sizer.Add(self.PinX1_{}_Stage_Value, 0, 0, 0)".format(x,x))

        for x in range(1,9):
            exec("self.PinX2_{}_Stage_Sizer = wx.BoxSizer(wx.HORIZONTAL)".format(x))
            exec("self.TestPinsSizer.Add(self.PinX2_{}_Stage_Sizer, 1, wx.EXPAND, 0)".format(x))
            exec("self.PinX2_{}_Stage_Label = wx.StaticText(self.New_Test_Creator, wx.ID_ANY, 'X2_{}')".format(x,x))
            exec("self.PinX2_{}_Stage_Sizer.Add(self.PinX2_{}_Stage_Label, 0, 0, 0)".format(x,x))
            exec("self.PinX2_{}_Stage_Mode_Select = wx.ComboBox(self.New_Test_Creator, wx.ID_ANY, choices=['Off','On'], style=wx.CB_DROPDOWN)".format(x))
            exec("self.PinX2_{}_Stage_Mode_Select.SetSelection(-1)".format(x))
            exec("self.PinX2_{}_Stage_Mode_Select.Enable(False)".format(x))
            exec("self.PinX2_{}_Stage_Sizer.Add(self.PinX2_{}_Stage_Mode_Select, 0, 0, 0)".format(x,x))

###############################################################################################################################

        self.Result_Viewer = wx.Panel(self.Notebook, wx.ID_ANY)
        self.Notebook.AddPage(self.Result_Viewer, "Result Viewer")

        self.New_Test_Creator.SetSizer(self.NewTestCreatorSizer)

        self.New_Test_Initiator_Tab.SetSizer(self.Creator_Sizer)

        self.Test_Tab.SetSizer(self.Test_Tab_Sizer)

        self.Load_Existing_Test_Tab.SetSizer(self.Tab_Sizer)

        self.Layout()
        # end wxGlade

# end of class MainWindow

#### To be placed under init of MainWindowUI ############################################################################################################
##########################################################################################################################################################
        
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')


        self.initiateGlobalVars()
        self.ReloadSerialPorts(None)
        self.__attach_events()
        self.loadTests()
        

    def initiateGlobalVars(self):
        #Modes - 0 = nothing active
        # 1 - active test being tested
        # 2 - new test being created.
        # 3 - modifying old test.
        self.current_mode = 0
        self.test = None #Currently loaded test
        self.currentStage = None #Currently loaded stage.
        self.PinControl = PinControlUI.Pin_Control(None, wx.ID_ANY, "")
        self.path = Path('.')


    def __attach_events(self):
        self.Connect_Button.Bind(wx.EVT_BUTTON, self.ConnectPort)
        self.Disconnect_Button.Bind(wx.EVT_BUTTON, self.DisconnectSerialPushed)
        self.ShowPinUI_Button.Bind(wx.EVT_BUTTON, self.showPinUI)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.Load_Test.Bind(wx.EVT_BUTTON, self.LoadTestPushed)
        self.Next_Step_Button.Bind(wx.EVT_BUTTON, self.nextStepPushed)
        self.createNewTestButton.Bind(wx.EVT_BUTTON, self.onCreateNewTest)
        self.Notebook.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.onNotebookPageChange)
        self.clearNewTestValuesButton.Bind(wx.EVT_BUTTON, self.onClearAllValues)
        self.NewTestCreatorPreviousStage.Bind(wx.EVT_BUTTON, self.onNewTestPreviousStage)
        self.NewTestCreatorNextStage.Bind(wx.EVT_BUTTON, self.onNewTestNextStage)
        self.NewTestCreatorFinishTestButton.Bind(wx.EVT_BUTTON, self.onNewTestFinishTest)
        self.NewTestCreatorSelectImage.Bind(wx.EVT_BUTTON, self.onNewTestSelectImage)
        self.Modify_Test_Button.Bind(wx.EVT_BUTTON, self.modifyTestPushed)
        self.Delete_Test_Button.Bind(wx.EVT_BUTTON, self.DeleteTestPushed)
        self.Start_New_Test_Button.Bind(wx.EVT_BUTTON, self.NewTestPushed)
        self.Close_Current_Test_Button.Bind(wx.EVT_BUTTON, self.CloseTestPushed)
        self.Delete_Stage_Button.Bind(wx.EVT_BUTTON, self.onNewTestDeleteStage)
        self.Refresh_Serial_Button.Bind(wx.EVT_BUTTON, self.ReloadSerialPorts)
        #self.PortConnect()

    #loadTests - load in the test procedures located in test folder.
    #Then populate the list with them.
    def loadTests(self): 
        self.List_Of_Tests.Clear()
        p2 = self.path / "Tests"
        if p2.exists():
            self.List_Of_Tests_Label.SetLabelText("List of tests found at {}".format(p2.resolve()))
            for x in p2.iterdir():
                if x.is_dir():
                    self.List_Of_Tests.Append(x.name)
        else:
            print("error - Tests directory not found.")            

    def OnClose(self, event):
        if self.current_mode!=0:
            if wx.MessageBox("File has not been saved, continue closing?", "Please confirm below.", wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
                event.veto()
                return

        if self.current_mode==2:
            if wx.MessageBox("Test not finished being created, abort and delete progress?", "Please choose below.", wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
                event.veto()
                return
            else:
                #Remove the folder that was created and everything inside it.
                for x in self.test.folderPath.iterdir():
                    x.unlink()
                self.test.folderPath.rmdir()
                #TODO: Delete test object.
                
        if self.current_mode==2:
            if wx.MessageBox("Test not finished being modified, abort and write current progress?", "Please choose below.", wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
                event.veto()
                return
            else:
                #Save the changes in a json file.
                self.saveTest()

            
        #self.PinControl.stopUIThread()
        if self.PinControl.getSerialActive():
            self.DisconnectSerialPushed(None)
        self.PinControl.closeSelf()
        self.Destroy()
        exit(0)

    #Load in the files for the test sequence after button click.
    def loadTestSequence(self, path):
        #Get a list of all files within the test folder
        if path.exists():
            logging.info("path exists")
            for x in path.iterdir():
                if x.is_file():
                    logging.debug("x is file")
                    if x.suffix == '.txt':
                        logging.debug("txt file found.")
                        self.test = TestSequence.TestSequence()
                        if not self.test.initialLoadIn(x, self.PinControl.MasterPinsList):  #If this fails, does not return true, error.
                            return False
                        else:
                            logging.info("Test loaded.")
                    else:
                        logging.debug("Txt file not found.")
            return True
        else:
            print("Error  - file not found/path does not exist.")
            return False

        #Find the .txt, then parse in as json
        #If fails, return False.  loadTestSequence failed.

        #reload serial.
        self.ReloadSerialPorts()

#######################################################################################################################################
############################          Main Tab Control Buttons         ################################################################
#######################################################################################################################################
    #Load the Test selected, or say no test selected/display test error.
    def LoadTestPushed(self, event):
        #Verify program is in mode 0:
        if self.current_mode!=0:
            wx.MessageBox("Error - Not able to load test, current test in progress or creating test.", "Unable to load",  wx.OK | wx.ICON_INFORMATION)
            return
        if (self.List_Of_Tests.GetSelection()==-1):
            wx.MessageBox("Nothing selected.  No action able to be performed", "No Selected Test",  wx.OK | wx.ICON_INFORMATION)
            return
        if ((not self.Serial_Enabled_Checkbox.GetValue()) and self.Port_Connect.GetSelection()==-1):
            wx.MessageBox("No Serial port selected - please select one before loading test, or disable serial comm.", "Serial Error", wx.OK | wx.ICON_INFORMATION)
            return

        #If Serial is enabled, and not connected, connect serial.
        if not self.Serial_Enabled_Checkbox.GetValue():
            if not self.PinControl.getSerialActive():
                self.ConnectPort(None) #Activate serial line, disable.
                #Wait a second.
                time.sleep(0.2)


        #Initiate loading test in new tab.
        #Switch tab
        p = Path('.')
        p = p/"Tests"/self.List_Of_Tests.GetStringSelection()
        logging.debug(p)
        if not self.loadTestSequence(p):
            print("Error loading test.")
        #logging.info(self.test.exportJsonFile())
        self.test.folderPath = p
        self.current_mode = 1
        self.Notebook.SetSelection(1)
        self.startTest()


    def modifyTestPushed(self, event):
        #Load in a test to be modified with new test creator tab.

        #Check if program is in mode 0:
        if self.current_mode!=0:
            wx.MessageBox("Error - Not able to modify test, current test in progress or already creating test.", "Unable to modify",  wx.OK | wx.ICON_INFORMATION)
            return False

        if (self.List_Of_Tests.GetSelection()==-1):
            wx.MessageBox("Nothing selected.  No action able to be performed", "No Selected Test",  wx.OK | wx.ICON_INFORMATION)
            return False
        #Initiate loading test in new tab.
        #Switch tab
        p = Path('.')
        p = p/"Tests"/self.List_Of_Tests.GetStringSelection()

        logging.debug(p)
        if not self.loadTestSequence(p):
            wx.MessageBox("Unable to modify test, error loading test.", "Error loading test",  wx.OK | wx.ICON_INFORMATION)
            return False


        self.test.folderPath = p
        self.current_mode = 2
        self.test.current_test = 0
        self.testCreatorLoadInValues()

        #Set the active tab to tbe the test creator tab
        self.Notebook.SetSelection(3)

    def DeleteTestPushed(self, event):

        if self.current_mode!=0:
            wx.MessageBox("Error - Not able to delete test, current test in progress or creating test.", "Unable to delete",  wx.OK | wx.ICON_INFORMATION)
            return

        if (self.List_Of_Tests.GetSelection()==-1):
            wx.MessageBox("Nothing selected.  No action able to be performed", "No Selected Test",  wx.OK | wx.ICON_INFORMATION)
            return
        else:
            if wx.MessageBox("Are you sure you want to delete test {}?".format(self.List_Of_Tests.GetStringSelection()), "Delete test?",  wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
                event.veto()
                return
            
        #Find and delete directory and all contents.
        self.p = Path('.')
        self.p = self.p/"Tests"/self.List_Of_Tests.GetStringSelection()
        for x in self.p.iterdir():
            x.unlink()
        self.p.rmdir()
        self.loadTests()

    def NewTestPushed(self, event):
        #Move to the New Test page.
        self.Notebook.SetSelection(2)


    def ConnectPort(self, events):
        self.PinControl.ExternalStartSerial(self.Port_Connect.GetSelection())
        self.Connect_Button.Enable(False)
        #Disable the connect button.
    
    def DisconnectSerialPushed(self, events):
        self.PinControl.FullReset(None)
        self.PinControl.ExternalStopSerial()
        self.Connect_Button.Enable(True)

    def ReloadSerialPorts(self, event):
        preferred_index = -1
        self.Port_Connect.Clear()
        for n, (portname, desc, hwid) in enumerate(sorted(PinControlUI.SerialComm.serial.tools.list_ports.comports())):
            self.Port_Connect.Append(u'{} - {}'.format(portname, desc))
            if desc.find("Mega") != -1:
                preferred_index = self.Port_Connect.GetCount() - 1
        self.Port_Connect.SetSelection(preferred_index)

    def showPinUI(self, events):
        self.PinControl.Show()
        #TODO: Change the PinControlUI to be able to be 'closed', made
        #not visible anymore and then able to be made visible again.

#######################################################################################################################################
############################         End Main Tab Control Buttons         #############################################################
#######################################################################################################################################


#######################################################################################################################################
################################         Test Tab Control Buttons         #############################################################
#######################################################################################################################################

    def nextStepPushed(self, event):
        if self.current_mode==1:
            if self.test.isNextTest():
                if not self.Serial_Enabled_Checkbox.GetValue(): #If not ignoring serial:
                    if not self.currentStage.passPinCheck():  #If not passing pin check
                        if wx.MessageBox("Pins do not pass pin check.  Error w/ pins.  Continue?", "Pins do not pass check.", wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
                            return #Not continuing.
                    #Continuing
                    self.loadNextTestStage() #Load next stage
                    self.serialUpdatePinOutput() #Update the pin values for the next stage.
                    self.PinControl.UpdatePinOutput(None) #Send the update command to the Elegoo.
                    #Does not pass check
                    #Code this in.
                else: #If ignoring serial
                    self.loadNextTestStage()
                    self.serialUpdatePinOutput()
            else:
                self.finishTest()

    def CloseTestPushed(self, event):
        if wx.MessageBox("Test is not completed, close test and disregard progress?", "Please confirm below.", wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
            event.veto()
            return
        
        self.clearCurrentTest()
        self.FullReset(None)
        self.DisconnectSerialPushed(None) #Disconnect serial on test close.

#######################################################################################################################################
################################        End Test Tab Control Buttons         ##########################################################
#######################################################################################################################################


    def startTest(self):
        self.Current_Test_Label.SetLabel("Current Test: {}".format(self.test.name))
        #Initialize Pins
        self.InitializePins()
        #Check if connected to Serial or not:
        self.loadNextTestStage()

    def InitializePins(self):
        if not self.Serial_Enabled_Checkbox.GetValue():
            #self.PinControl.externalResetPins()
            time.sleep(1.0)
        for x in self.PinControl.MasterPinsList.PinList:
            self.PinControl.externalAddPin(x.getDict()['pin'], x.getDict()['mode'], x.getDict()['expected_value'])
        #Start sending back pin status:
        if not self.Serial_Enabled_Checkbox.GetValue():
            self.PinControl.ConfigurePinIO(None)
            time.sleep(0.5) #Have to wait for 2.0 seconds for some reason... 
            #Rework serial comms speed at one point.
            self.PinControl.ConfigOutputTime(None)

    def isOutputPin(self, pin):
        for x in self.PinControl.MasterPinsList.PinList:
            if (x['pin']==pin.pin):
                #If is output pin, return true.
                if (x['mode'] == 1):
                    return True
                #Unfinished.
                return False

    def loadNextTestStage(self):
        self.currentStage = self.test.getNextTest()
        
        #Update the pins in the PinControlUI.
        for x in self.currentStage.testPins:
            #If the pin is an output pin on the testpins list:
            if self.isOutputPin(x):
                #Change the pin output value:
                #TODO:  Finish This - below line is not working.
                self.PinControl.ExternalChangePinStatus(x.pin, x.value)


        #Load in the image
        logging.debug("The folderpath: {}".format(str(self.test.folderPath)))
        for x in self.test.folderPath.iterdir():
            logging.debug("Checking for image {}".format(self.currentStage.image))
            if x.is_file():
                logging.debug(x.name)
                if x.name==self.currentStage.image:
                    logging.debug("Found image, updating.")
                    self.Next_Step_Image.SetBitmap(wx.Bitmap(str(x.resolve()), wx.BITMAP_TYPE_ANY))
        #Load in the test stage number, and adjust the status below
        self.Test_Status_Label.SetLabel("Stage {} out of {}".format(self.test.current_test, self.test.getNumStages()))
        #Change Operation to say Description.
        self.Stage_Description_Label.SetLabel("{}".format(self.currentStage.description))

    def serialUpdatePinOutput(self):
        for x in self.test.TestPinsList.PinList:
            print("Pin {} is mode {}".format(x.getPinNumber(), x.getMode()))
            if x.getMode()==1: #Here - issue with properly updating?
                #self.PinControl.ExternalChangePinStatus(x.getPinNumber(), x.getValue())
                print("Class SerialUpdatePinOutput::  Pin {} set to {}".format(x.getPinNumber(), x.getValue()))
        self.PinControl.UpdatePinOutput(None)
        time.sleep(0.5)

    def finishTest(self):
        wx.MessageBox("Test finished - passed.", "Test Passed",  wx.OK | wx.ICON_INFORMATION)
        self.clearCurrentTest()
        self.DisconnectSerialPushed(None)

    def clearCurrentTest(self):
        self.test = None
        self.current_mode = 0
        self.currentStage = None
        self.Notebook.SetSelection(0)
        #If not ignoring serial, reset Elegoo:
        #TODO Insert reset protocol here.

#####################Handling test creation#########################
    def onNotebookPageChange(self, event):
        if self.Notebook.GetSelection()==3:
            if not (self.current_mode==2 or self.current_mode==3):
                wx.MessageBox("No test being created or modified - please create a new test before creating stages.", "No Test Creation in Progress",  wx.OK | wx.ICON_INFORMATION)
                self.Notebook.SetSelection(2)
        elif self.Notebook.GetSelection()==1:
            if self.current_mode==0:
                wx.MessageBox("No test is selected - please select a test from List of Tests in 'Load Test' tab.", "No test selected.",  wx.OK | wx.ICON_INFORMATION)
                self.Notebook.SetSelection(0)     
        elif self.Notebook.GetSelection()==2:
            if not (self.current_mode==0):
                wx.MessageBox("Test is currently active - cannot create new test.  Please close current test before creating a test.", "Cannot create new test.", wx.OK | wx.ICON_INFORMATION)
                self.Notebook.SetSelection(0)
        #Check to see if a new test is being created,
        #if not then move new test away.
    

#######################################################################################################################################
################################        New Test Tab Control Buttons         ##########################################################
#######################################################################################################################################

    def onCreateNewTest(self, event):
        if self.current_mode==0:

            #Check to make sure that the user input a test name and description.
            if self.TestNameTextbox.GetValue()=="":
                return False
            if self.Test_Description.GetValue()=="":
                return False
            
            #Check to make sure this test doesn't already exist:
            for x in self.List_Of_Tests.GetStrings():
                if x == self.TestNameTextbox.GetValue():
                    wx.MessageBox("Unable to create test - Test with that name already exists!", "Unable to create test",  wx.OK | wx.ICON_INFORMATION)
                    return False
            
            self.current_mode = 2

            #Make a new test object,
            #Store in the pins used, name and description.

            self.test = TestSequence.TestSequence(self.TestNameTextbox.GetValue(), self.Test_Description.GetValue())
            self.getTestPinsList() #Load in the pins that will be used for this test

            #Make a new folder for the test:
            self.test.folderPath.mkdir()

            self.test.currentImgPath = None
            #Set up the test creation tab
            self.NewTestCreatorTestName.SetLabelText("Test Name: {}".format(self.test.name))

            self.Notebook.SetSelection(3)
        
        else:
            wx.MessageBox("Unable to create test - testing in progress or need new testing.", "Unable to create test",  wx.OK | wx.ICON_INFORMATION)
        #On create new test - create a new test object,
        #Move to NewTestCreator tab

    def onClearAllValues(self, event):
        #All the values are reset for the new test creator tab
        for x in range(1,14):
            exec("self.PinX1_{}Select.SetSelection(2)".format(x))
            exec("self.PinX1_{}Description.SetValue('Description')".format(x))
            if x!=13 or x!=14:
                exec("self.PinX1_{}_Stage_Mode_Select.Enable(False)".format(x))
            exec("self.PinX1_{}_Stage_Value.Enable(False)".format(x))
        for x in range(14, 18):
            exec("self.PinX1_{}Select.SetSelection(1)".format(x))
            exec("self.PinX1_{}Description.SetValue('Description')".format(x))
            exec("self.PinX1_{}_Stage_Value.Enable(False)".format(x))

        for z in range(1,9):
            exec("self.PinX2_{}Select.SetSelection(1)".format(z))
            exec("self.PinX2_{}Description.SetValue('Description')".format(z))
            exec("self.PinX2_{}_Stage_Mode_Select.Enable(False)".format(z))

#######################################################################################################################################
################################        End New Test Tab Control Buttons         ######################################################
#######################################################################################################################################

    #getTestPinsList() -
    #On creating a new test, this goes through and finds each active pin
    #that will be used.  The pins are stored in the MasterPinsList.
    #Also enables the pins in the stage creation menu.
    def getTestPinsList(self):
        for x in range(1,13):
            if eval("self.PinX1_{}Select.GetSelection()".format(x))!=1:
                exec("self.PinControl.MasterPinsList.addPin({}, 1, 0, self.PinX1_{}Description.GetValue())".format(x+53, x, x))
                exec("self.PinX1_{}_Stage_Mode_Select.Enable(True)".format(x))
                exec("self.PinX1_{}_Stage_Value.Enable(True)".format(x))

        for x in range(13, 15):
            if eval("self.PinX1_{}Select.GetSelection()".format(x))!=1:
                exec("self.PinControl.MasterPinsList.addPin({}, 2, 0, self.PinX1_{}Description.GetValue())".format(x+62, x, x))
                exec("self.PinX1_{}_Stage_Value.Enable(True)".format(x))

        for x in range(15, 18):
            if eval("self.PinX1_{}Select.GetSelection()".format(x))!=1:
                exec("self.PinControl.MasterPinsList.addPin({}, 2, 0, self.PinX1_{}Description.GetValue())".format(x-13, x, x))
                exec("self.PinX1_{}_Stage_Value.Enable(True)".format(x))

        for z in range(1,9):
            if eval("self.PinX2_{}Select.GetSelection()".format(z))!=1:
                exec("self.PinControl.MasterPinsList.addPin({}, 2, 0, self.PinX2_{}Description.GetValue())".format(z+21, z, z))
                exec("self.PinX2_{}_Stage_Mode_Select.Enable(True)".format(z))


#######################################################################################################################################
################################        New Test Creator Tab Control Buttons         ##################################################
#######################################################################################################################################


    #onNewTestStage() - when the new test next stage button is clicked.
    def onNewTestNextStage(self, event):
        #Make sure all necessary values actually exist
        #Check for existing img path, and write image to folder.
        if not self.test.currentImgPath:
            wx.MessageBox("No image selected, please select an image", "No image selected",  wx.OK | wx.ICON_INFORMATION)
            return False
        #Check for pins actually having values.
        #Adjust all pin values in the MasterPinList based on the 
        #changes made in the NewTestCreator.
        self.updateMasterPinList_fromNewTestCreator()

        #Store all the values into the test stage object
        #Change this storage up to use the currentStage class??

        #Save Stage - depending on if we are in the last stage or a previous stage, save differently.
        if ((self.test.current_test == len(self.test.testStages)) and len(self.test.testStages)==0) or (self.test.current_test == len(self.test.testStages)):
            
            self.test.testStages.append(TestSequence.testStage(self.test.current_test, self.NewTestCreatorDescription.GetValue(), "img{}.png".format(self.test.current_test), self.PinControl.MasterPinsList.getTestStageDict(), self.NewTestCreatorErrorMessage.GetValue(), None))
            self.test.current_test+=1
            #Clear currentImgPath
            self.test.currentImgPath = None

        else: #Save current stage, load old stage.
            self.test.testStages[self.test.current_test] = TestSequence.testStage(self.test.current_test, self.NewTestCreatorDescription.GetValue(), "img{}.png".format(self.test.current_test), self.PinControl.MasterPinsList.getTestStageDict(), self.NewTestCreatorErrorMessage.GetValue(), None)
            #Also, load in the next test status.
            self.test.current_test+=1
            self.testCreatorLoadInValues()
            self.updateNewTestUI()

        #Increment stage levels
        print("Test stage {} saved.".format(self.test.current_test-1))
        print(self.test.exportJsonFile(self.PinControl.MasterPinsList.getTestSequenceDict()))
        self.updateNewTestUI()

    def onNewTestDeleteStage(self, event):
        #Delete stage
        #Increment backwards.
        self.onNewTestPreviousStage(None)
        self.test.testStages.pop(self.test.current_test+1)
        self.testCreatorLoadInValues()
        self.updateNewTestUI()

    def onNewTestPreviousStage(self, event):
        #First check if there is a previous stage
        if self.test.current_test==0:
            wx.MessageBox("Currently at the starting test stage, there are no previous tests to choose from.", "No Previous Stages",  wx.OK | wx.ICON_INFORMATION)
            return
        
        #If not, save current test stage:
        #if self.test.current_test>(len(self.test.testStages)-1):
            #self.test.testStages.append(TestSequence.testStage(self.test.current_test, self.NewTestCreatorDescription.GetValue(), self.test.currentImgPath, self.getNewTestCreatorPins(), self.NewTestCreatorErrorMessage.GetValue(), None))
        #else:
        #self.test.testStages[self.test.current_test] = TestSequence.testStage(self.test.current_test, self.NewTestCreatorDescription.GetValue(), self.test.currentImgPath, self.getNewTestCreatorPins(), self.NewTestCreatorErrorMessage.GetValue(), None)
        
        self.test.current_test -= 1
        #self.test.testStages[self.test.current_test]
        self.testCreatorLoadInValues()

        self.updateNewTestUI()
       
        print("Navigated backwards.")

    def onNewTestFinishTest(self, event):
        #Save the test
        #Dump the JSON file:
        self.saveTest()
        #Reset the variables associated with a new test
        self.test = None
        self.current_mode = 0
        self.currentStage = None

        self.loadTests()
        self.Notebook.SetSelection(0)

    def onNewTestSelectImage(self, event):
        #Open a box to select the image for a certain stage.
        with wx.FileDialog(self, "Open Image", wildcard = "Image files (*.png;*.gif;*.jpeg;*.jpg)|*.png;*.gif;*.jpeg;*.jpg",
            style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return
            pathname = fileDialog.GetPath()
            self.test.currentImgPath = pathname
            img = Image.open(self.test.currentImgPath)
            #Get size of original image:
            width, height = img.size
            #Scale so that the width is 500:
            scale = 500 / width
            img = img.resize((int(width * scale), int(height * scale))) #resize the image to 500x500.
            img.save("{}\img{}.png".format(self.test.folderPath.resolve(), self.test.current_test))
        #Also draw image to screen:
        self.drawNewTestImage()



#######################################################################################################################################
################################        End New Test Creator Tab Control Buttons         ##############################################
#######################################################################################################################################

    def updateNewTestUI(self):
        self.updateNewTestCreatorNumber()
        self.drawNewTestImage()
        print("updateNewTestUI called, finished.")

    #Return a dict with all pins and values.
    def updateMasterPinList_fromNewTestCreator(self):
        for x in range(1,13):
            if eval("self.PinX1_{}_Stage_Value.IsEnabled()".format(x)):
                if eval("self.PinX1_{}_Stage_Value.GetValue()==''".format(x,x)):
                    #send message that there needs to be a value in this value box before saving
                    wx.MessageBox("Please check values for pin X1_{} in order to save stage.".format(x), "Check values",  wx.OK | wx.ICON_INFORMATION)
                else:
                    #format: changePinExpectedValue(pin, value)
                    self.PinControl.MasterPinsList.changePinExpectedValue(self.getPinObject("X1_{}".format(x)).pin, self.getPinObject("X1_{}".format(x)).value)
                    #format: changePinCheckCode(pin, check_code)
                    self.PinControl.MasterPinsList.changePinCheckCode(self.getPinObject("X1_{}".format(x)).pin, self.getPinObject("X1_{}".format(x)).check_code)
        for x in range(13, 18):
            if eval("self.PinX1_{}_Stage_Value.IsEnabled()".format(x)):
                if eval("self.PinX1_{}_Stage_Value.GetValue()==''".format(x)):
                    #send message that there needs to be a value in this value box before saving
                    wx.MessageBox("Please check values for pin X1_{} in order to save stage.".format(x), "Check values",  wx.OK | wx.ICON_INFORMATION)
                else:
                    self.PinControl.MasterPinsList.changePinExpectedValue(self.getPinObject("X1_{}".format(x)).pin, self.getPinObject("X1_{}".format(x)).value)

        for x in range(1, 9):
            if eval("self.PinX2_{}_Stage_Mode_Select.IsEnabled()".format(x)):
                if eval("self.PinX2_{}_Stage_Mode_Select.GetValue()==''".format(x)):
                    wx.MessageBox("Please check values for pin X2_{} in order to save stage.".format(x), "Check values",  wx.OK | wx.ICON_INFORMATION)
                else:
                    self.PinControl.MasterPinsList.changePinExpectedValue(self.getPinObject("X2_{}".format(x)).pin, self.getPinObject("X2_{}".format(x)).value)

    def getPinObject(self, PinID):
        ret = PinList.pin(0,0,0,None)
        ret.pin = self.translateConnectorToPin(PinID)
        if ret.pin<53 or ret.pin > 74:
            ret.check_code = 0
        else:
            ret.check_code = eval("self.Pin{}_Stage_Mode_Select.GetSelection()".format(PinID))+1
        if not PinID.split("_")[0]=="X2":
            ret.value = eval("self.Pin{}_Stage_Value.GetValue()".format(PinID))
        else:
            ret.value = int(not eval("self.Pin{}_Stage_Mode_Select.GetSelection()".format(PinID))) #Invert the on/off value of testbox.
        return ret

    def translateConnectorToPin(self, PinID):
        if int(PinID[1])==1:
            if int(PinID.split("_")[1])<13:
                return int(PinID.split("_")[1]) + 53
            elif int(PinID.split("_")[1]) == 13 or int(PinID.split("_")[1]) == 14:
                return int(PinID.split("_")[1]) + 62
            else:
                return int(PinID.split("_")[1]) - 13
        else:
            return int(PinID.split("_")[1]) + 21

    def translatePinToConnector(self, PinNumber):
        if PinNumber>53:
            if PinNumber > 74:
                return "X1_{}".format(PinNumber - 62)
            else:
                return "X1_{}".format(PinNumber-53)
        elif PinNumber>21:
            return "X2_{}".format(PinNumber-21)
        return "X1_{}".format(PinNumber+13)
        
    def setNewTestCreatorPinVal(self, pin): #Used in navigating backwards in pin system.
        
        #Check to see if this stage value should be set - make sure it's not an X2 first.
        if not (pin['pin']>21 and pin['pin']<30):
            exec("self.Pin{}_Stage_Value.SetValue(\"{}\")".format(str(self.translatePinToConnector(pin['pin'])), str(pin['expected_value'])))
        
        #If the pin has a dropdown, and is an analog input:
        if (pin['pin']>53) and (pin['pin'] != 75 and pin['pin'] != 76):
            print("Pin {} is {}".format(pin['pin'], self.translatePinToConnector(pin['pin'])))
            exec("self.Pin{}_Stage_Mode_Select.SetSelection({})".format(str(self.translatePinToConnector(pin['pin'])), str(pin['check_code'])))
            print("Pin {} set to code {}".format(self.translatePinToConnector(pin['pin']), pin['check_code']))
        elif (pin['pin'] > 21) and (pin['pin'] != 75 and pin['pin'] != 76):
            exec("self.Pin{}_Stage_Mode_Select.SetSelection({})".format(str(self.translatePinToConnector(pin['pin'])), str(not pin['expected_value'])))


        print("Pin {} set to {}".format(str(self.translatePinToConnector(pin['pin'])), str(pin['expected_value'])))

    def enableModifyTestPins(self):
        for z in self.PinControl.MasterPinsList.PinList:
            if z.mode==0: #ignore
                return
            elif z.pin>53:
                if z.mode==1: #Input
                    exec("self.Pin{}_Stage_Mode_Select.Enable(True)".format(self.translatePinToConnector(z.pin)))
                    exec("self.Pin{}_Stage_Value.Enable(True)".format(self.translatePinToConnector(z.pin)))
                else:
                    exec("self.Pin{}_Stage_Value.Enable(True)".format(self.translatePinToConnector(z.pin)))
            elif z.pin<7:
                exec("self.Pin{}_Stage_Value.Enable(True)".format(self.translatePinToConnector(z.pin)))
            elif z.pin<30:
                exec("self.Pin{}_Stage_Mode_Select.Enable(True)".format(self.translatePinToConnector(z.pin)))

    def testCreatorLoadInValues(self):
         #Load in the previous test values:
        #Description
        self.NewTestCreatorDescription.SetValue(self.test.testStages[self.test.current_test].getDict()['description'])
        #Error
        self.NewTestCreatorErrorMessage.SetValue(self.test.testStages[self.test.current_test].getDict()['error'])
        #Image path
        self.test.currentImgPath = self.test.testStages[self.test.current_test].getDict()['image']
        #All pins and their values

        #Enable the pins that are used for this test:
        self.enableModifyTestPins()

        for z in self.test.testStages[self.test.current_test].getDict()['pin_check']:
            self.setNewTestCreatorPinVal(z)
        
        self.drawNewTestImage()
        self.updateNewTestCreatorNumber()

        print("Finished loading in previously-made test creator stage {}.".format(self.test.current_test))
        #print(self.test.testStages[self.test.current_test].getDict())


    def updateNewTestCreatorNumber(self):
        self.NewTestCreatorStageNumber.SetLabelText("Stage: {}/{}".format(self.test.current_test, len(self.test.testStages)))
        print("updateNewTestCreatorNumber Called - finished.")

    def saveTest(self):
        with open("{}/{}.txt".format(self.test.folderPath, self.test.name), 'w') as outfile:
            outfile.write(self.test.exportJsonFile(self.PinControl.MasterPinsList.getTestSequenceDict()))
            outfile.close()
        
    def onResultViewer(self, event):
        #
        pass


    def drawNewTestImage(self):
        logging.debug("Folder path : {}".format(self.test.folderPath))
        for x in self.test.folderPath.iterdir():
            logging.debug("Checking for image {}".format("img{}.png".format(self.test.current_test)))
            if x.is_file():
                logging.debug(x.name)
                if x.name=="img{}.png".format(self.test.current_test):
                    logging.debug("Found image, updating.")
                    self.TestCreatorCurrentImg.SetBitmap(wx.Bitmap(str(x.resolve()), wx.BITMAP_TYPE_ANY))
                    self.NewTestCurrentImgPath.SetLabelText("Current Image Path: "+str(x.resolve()))
                    return 0            
        self.NewTestCurrentImgPath.SetLabelText("Current Image Path: None")
        self.TestCreatorCurrentImg.ClearBackground()

###############################################################################################################################################

################################  Miscellaneous Functions  ##############################################




class MyApp(wx.App):
    def OnInit(self):
        self.frame = MainWindow(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
